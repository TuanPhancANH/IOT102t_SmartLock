#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Servo.h>
#include <EEPROM.h>
#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>

SoftwareSerial mySerial(2, 3); // RX, TX cho cảm biến vân tay
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

Servo servo;
LiquidCrystal_I2C LCD(0x27, 16, 2); // Địa chỉ I2C của LCD là 0x27

const int servoPin = A2; // Servo vẫn nối với chân A2
const int PASSWORD_LENGTH = 6; // Độ dài mật khẩu (bao gồm '\0')
char inputPassword[PASSWORD_LENGTH];
char storedPassword[PASSWORD_LENGTH];
int flag_opendoor = 0; // Cờ trạng thái cửa (mở/đóng)
int count = 0, trial_count = 0, pos = 0;

const byte ROWS = 4, COLS = 4;
char keys[ROWS][COLS] = {
   {'1','2','3','A'},
   {'4','5','6','B'},
   {'7','8','9','C'},
   {'*','0','#','D'}
};

// Điều chỉnh lại các chân kết nối của keypad
byte rowPins[ROWS] = { A0, A1, 4, 5 }; // Chân A0, A1, 4, 5 cho hàng
byte colPins[COLS] = { 6, 7, 8, 9 }; // Chân 6, 7, 8, 9 cho cột

Keypad kpd = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

void setup() {
   servo.attach(servoPin);
   CloseDoor();

   LCD.init(); // Khởi tạo LCD
   LCD.backlight(); // Bật đèn nền LCD

   // Khởi tạo cảm biến vân tay
  // Khởi tạo cổng Serial
  Serial.begin(9600);
  mySerial.begin(9600); // Khởi tạo Serial1 để giao tiếp với cảm biến vân tay

  // Kiểm tra xem cảm biến có được kết nối không
  if (finger.verifyPassword() == false) {  // Kiểm tra kết nối với cảm biến
    LCD.print("Fingerprint ");
    LCD.setCursor(0, 1);
    LCD.print("not detected!");
    while (1);  // Dừng lại nếu không tìm thấy cảm biến
  }

  LCD.clear();
  LCD.print("Sensor initialized");
  delay(1000);

   // Đặt mật khẩu mặc định nếu EEPROM chưa được khởi tạo
   if (EEPROM.read(0) != '2' || EEPROM.read(1) != '0' || EEPROM.read(2) != '2' || EEPROM.read(3) != '4') {
      saveDefaultPasswordToEEPROM();
   }
   readPasswordFromEEPROM(); // Đọc mật khẩu từ EEPROM

   // Hiển thị thông báo khởi động
   LCD.setCursor(0, 0);
   LCD.print("   WELCOME !!");
   delay(1000);

   LCD.clear();
   LCD.print("Enter Password :");
   trial_count = 0;
   count = 0;
   LCD.setCursor(0, 1);
}

void loop() {
   char key = kpd.getKey();
   if (key != NO_KEY) {
      if (key == '#') { // Nhấn "#" để xác nhận mật khẩu
         inputPassword[count] = '\0'; // Kết thúc chuỗi
         if (comparePassword()) {
            LCD.clear();
            LCD.print("  VERIFIED !  ");
            trial_count = 0;
            OpenDoor();
            delay(5000);
            CloseDoor();
         } else {
            LCD.clear();
            LCD.print("Wrong Password!");
            delay(1000);
            trial_count++;
         }

         if (trial_count >= 3) {
            LCD.clear();
            LCD.print("SYSTEM LOCKDOWN!");
            delay(1500);
         }

         LCD.clear();
         LCD.print("Enter Password :");
         count = 0;
         LCD.setCursor(0, 1);
      } else if (key == 'A') { // Nhấn "A" để đổi mật khẩu
         changePassword();
      } else if (count < PASSWORD_LENGTH - 1) { // Nhập ký tự
         LCD.print('*');
         inputPassword[count++] = key;
      }
   }
   int fingerID = getFingerprintID();
  if (fingerID >= 0) {
    if (fingerID == 1) { // Vân tay hợp lệ (ví dụ, ID 1 là vân tay của người đã đăng ký)
      LCD.clear();
      LCD.print("Fingerprint Verified");
      OpenDoor();
      delay(5000);
      CloseDoor();
    } else {
      LCD.clear();
      LCD.print("Fingerprint Not Found");
      delay(1000);
    }
  }
}

void changePassword() {
   LCD.clear();
   LCD.print("Old Password:");
   count = 0;
   LCD.setCursor(0, 1);
  
   while (true) { // Chờ nhập mật khẩu cũ
      char key = kpd.getKey();
      if (key != NO_KEY) {
         if (key == '#') {
            inputPassword[count] = '\0'; // Kết thúc chuỗi
            if (comparePassword()) {
               LCD.clear();
               LCD.print("Enter New Pass:");
               LCD.setCursor(0, 1);
               count = 0;

               while (true) { // Chờ nhập mật khẩu mới
                  key = kpd.getKey();
                  if (key != NO_KEY) {
                     if (key == '#') { // Nhấn "#" để lưu mật khẩu mới
                        inputPassword[count] = '\0'; // Kết thúc chuỗi
                        savePasswordToEEPROM();
                        LCD.clear();
                        LCD.print("Pass Updated!");
                        delay(2000);
                        LCD.clear();
                        LCD.print("Enter # to open");
                        return;
                     } else if (count < PASSWORD_LENGTH - 1) {
                        LCD.print('*');
                        inputPassword[count++] = key;
                     }
                  }
               }
            } else {
               LCD.clear();
               LCD.print("Wrong Password!");
               delay(1000);
               LCD.clear();
               LCD.print("Enter Password:");
               return;
            }
         } else if (count < PASSWORD_LENGTH - 1) {
            LCD.print('*');
            inputPassword[count++] = key;
         }
      }
   }
}

// Hàm nhận diện vân tay
int getFingerprintID() {
  int p = finger.getImage();
  if (p != FINGERPRINT_OK) {
    return -1; // Không có vân tay hoặc lỗi
  }

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK) {
    return -1; // Lỗi chuyển đổi vân tay
  }

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) {
    return -1; // Không tìm thấy vân tay trong cơ sở dữ liệu
  }

  return finger.fingerID;
}

// Đọc mật khẩu từ EEPROM
void readPasswordFromEEPROM() {
   for (int i = 0; i < PASSWORD_LENGTH; i++) {
      storedPassword[i] = EEPROM.read(i);
   }
   storedPassword[PASSWORD_LENGTH - 1] = '\0'; // Đảm bảo chuỗi kết thúc
}

// Lưu mật khẩu mặc định vào EEPROM
void saveDefaultPasswordToEEPROM() {
   char defaultPassword[] = "2024";
   for (int i = 0; i < PASSWORD_LENGTH - 1; i++) {
      EEPROM.write(i, defaultPassword[i]);
   }
   EEPROM.write(PASSWORD_LENGTH - 1, '\0'); // Kết thúc chuỗi
}

// Lưu mật khẩu mới vào EEPROM
void savePasswordToEEPROM() {
   for (int i = 0; i < PASSWORD_LENGTH; i++) {
      EEPROM.write(i, inputPassword[i]);
   }
   strncpy(storedPassword, inputPassword, PASSWORD_LENGTH); // Cập nhật mật khẩu
}

// So sánh mật khẩu nhập vào với mật khẩu lưu trữ
bool comparePassword() {
   for (int i = 0; i < PASSWORD_LENGTH - 1; i++) {
      if (storedPassword[i] != inputPassword[i]) return false;
   }
   return true;
}

void OpenDoor() {
   if (flag_opendoor == 1) return;
   for (pos = 15; pos <= 100; pos++) {
      servo.write(pos);
      delay(15);
   }
   flag_opendoor = 1;
}

void CloseDoor() {
   if (flag_opendoor == 0) return;
   for (pos = 100; pos >= 15; pos--) {
      servo.write(pos);
      delay(15);
   }
   flag_opendoor = 0;
}
